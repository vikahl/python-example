[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python_project_example"
description = "Example project generated from vikahl/python-template"
authors = [
    { name = "Viktor Rimark", email = "viktor@example.com" }
]

urls = { homepage = "https://blog.rxbc.se" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: MIT License"
]
dynamic = ["version", "readme"]

requires-python = ">=3.8"

# Specify the packages required by the project. For libraries, the constraints
# should be loosely defined as too narrow constraints will make it hard to
# install the package together with other libraries and will prevent users from
# getting security updates.

# For services, the dependencies (including transitive) should be compiled with
# pip-tools. See requirements.txt for details.


[project.optional-dependencies]
# pip-compile doesn't work well with extras referencing the package itself when
# hashes are required, as the package itself will be added to the list.
# Therefore the dependency groups "dev" is just for developer convenience and
# should not list dependencies itself. The compilation in tox lists all extras
# explicitly (i.e., --extra format,lint,types,test
dev = [ # All dev dependencies
    "python_project_example[format]",
    "python_project_example[lint]",
    "python_project_example[test]",
]
format = [
  "black",
  "isort"
]
lint = [
    "black",
    "isort",
    "pylint"
]
types = [
    "mypy"
]
test = [
    "pytest",
    "pytest-cov"
]
[project.scripts]
python_project_example = "python_project_example:app"

[tool.setuptools.dynamic]
version = {attr = "python_project_example.__version__"}
readme = {file = "README.md", content-type = "text/markdown"}

[tool.isort]
# For compatibility with Black
profile = "black"

[tool.mypy]
# Config equivalent to mypy --strict with ignore_missing_import added for
# convenience.
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
ignore_missing_imports = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage_paths]
# Define which paths that coverage should be measured for. We want to measure
# coverage against the built/installed package.
source = ["src", ".tox/*/site-packages/"]

[tool.coverage.report]
show_missing = true

[tool.pylint.'FORMAT']
# Black defaults to 88 character line length,
max-line-length = 88

[tool.pylint.'MESSAGES_CONTROL']
# Disable some pylint messages that I find annoying. You are recommended to
# review this list and add or remove depending on what you see fit.
disable = [
  "invalid-name",
  "too-many-instance-attributes",
  "too-few-public-methods",
  "too-many-arguments",
  "logging-format-interpolation",
  "logging-fstring-interpolation",
  "fixme"
]
